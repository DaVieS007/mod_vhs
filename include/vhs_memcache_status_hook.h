/** * @version $Id$ * @brief Extend Apache's server-status with memcached stats * @remark This is an "ap_hook_pre_config" - read Apache API Documentation * @author Rene Kanzler <rk (at) cosmomill (dot) de> * @param r structure of the current client request * @param flags  * @return always OK */#ifndef vhs_memcache_status_hook_H#define vhs_memcache_status_hook_Hstatic int vhs_memcache_status_hook(request_rec *r, int flags){    apr_uint16_t i;    apr_status_t rv;    apr_memcache_t *memctxt; //memcache context provided by mod_memcache ##    apr_memcache_stats_t *stats;	vhs_config_rec *vhr = (vhs_config_rec *) ap_get_module_config(r->server->module_config, &vhs_module);	if (vhr == NULL || flags & AP_STATUS_SHORT)		return OK;    memctxt = ap_memcache_client(r->server);				    for (i = 0; i < memctxt->ntotal; i++) {        rv = apr_memcache_stats(memctxt->live_servers[i], r->pool, &stats);        ap_rputs("<hr />\n", r);        ap_rprintf(r, "<h1>MemCached Status for %s:%d</h1>\n\n",                 memctxt->live_servers[i]->host,                memctxt->live_servers[i]->port);        ap_rputs("\n\n<table border=\"0\">", r);		ap_rprintf(r, "<tr><td>version:               </td><td>%s</td>\n", stats->version);         ap_rprintf(r, "<tr><td>pid:                   </td><td>%d</td>\n", stats->pid);        ap_rprintf(r, "<tr><td>uptime:                </td><td>\t%d</td>\n", stats->uptime);        ap_rprintf(r, "<tr><td>pointer_size:          </td><td>\t%d</td>\n", stats->pointer_size);        ap_rprintf(r, "<tr><td>rusage_user:           </td><td>\t%" APR_INT64_T_FMT "</td>\n", stats->rusage_user);        ap_rprintf(r, "<tr><td>rusage_system:         </td><td>\t%" APR_INT64_T_FMT "</td>\n", stats->rusage_system);        ap_rprintf(r, "<tr><td>curr_items:            </td><td>\t%d</td>\n", stats->curr_items);        ap_rprintf(r, "<tr><td>total_items:           </td><td>\t%d</td>\n", stats->total_items);        ap_rprintf(r, "<tr><td>bytes used:            </td><td>\t%" APR_UINT64_T_FMT "</td>\n", stats->bytes);        ap_rprintf(r, "<tr><td>curr_connections:      </td><td>\t%d</td>\n", stats->curr_connections);        ap_rprintf(r, "<tr><td>total_connections:     </td><td>\t%d</td>\n", stats->total_connections);        ap_rprintf(r, "<tr><td>connection_structures: </td><td>\t%d</td>\n", stats->connection_structures);        ap_rprintf(r, "<tr><td>cmd_get:               </td><td>\t%d</td>\n", stats->cmd_get);        ap_rprintf(r, "<tr><td>cmd_set:               </td><td>\t%d</td>\n", stats->cmd_set);        ap_rprintf(r, "<tr><td>get_hits:              </td><td>\t%d</td>\n", stats->get_hits);        ap_rprintf(r, "<tr><td>get_misses:            </td><td>\t%d</td>\n", stats->get_misses);        ap_rprintf(r, "<tr><td>evictions:             </td><td>\t%" APR_UINT64_T_FMT "</td>\n", stats->evictions);        ap_rprintf(r, "<tr><td>bytes_read:            </td><td>\t%" APR_UINT64_T_FMT "</td>\n", stats->bytes_read);        ap_rprintf(r, "<tr><td>bytes_written:         </td><td>\t%" APR_UINT64_T_FMT "</td>\n", stats->bytes_written);        ap_rprintf(r, "<tr><td>limit_maxbytes:        </td><td>\t%d</td>\n", stats->limit_maxbytes);        ap_rprintf(r, "<tr><td>threads:               </td><td>\t%d</td>\n", stats->threads);        ap_rputs("</table>\n", r);    }    return OK;}#endif